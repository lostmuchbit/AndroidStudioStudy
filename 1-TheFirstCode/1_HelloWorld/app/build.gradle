plugins {//这是一个插件，是干什么的呢?下面id就说了
    //有两种:
    // com.android.application   应用程序插件可以直接运行
    // com.android.library 库模块 要依托于代码
    id 'com.android.application'

    id 'kotlin-android'//kotlin开发必须
    id 'kotlin-android-extensions'//kotlin开发中的一些好用的拓展
}

android {//android闭包
    compileSdk 30 //指定项目的编译版本

    defaultConfig {//defaultConfig闭包
        applicationId "com.bo.a1_helloworld"//每个应用的唯一标识符,默认使用创建项目时指定的包名，可以修改，最好不改
        minSdk 21  //app最低兼容的android版本,对应关系自己查
        targetSdk 30 //在哪个android版本上测试过，完美运行所有功能，再高就会app阉割
        versionCode 1  //项目的版本号
        versionName "1.0" //项目的版本名

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"   //声明项目中会使用JUnit测试
    }

    buildTypes {//buildTypes闭包
        //通常会有release和debug两个闭包,debug可以忽略
        //release:用于指定生成正式版安装文件的配置
        //debug:用于指定生成测试版安装文件的配置
        release {
            //是否对项目的代码进行混淆,此处未混淆
            minifyEnabled false

            //proguard-android-optimize.txt在<Android SDK>/tools/proguard目录下,所有项目通用的混淆规则
            //proguard-rules.pro在当前项目的根目录下，存放当前项目特有的混淆规则
            //值得注意的是在android studio中都是测试版的
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'//

        }
    }
    compileOptions {//compileOptions闭包
        sourceCompatibility JavaVersion.VERSION_1_8//引用的java版本
        targetCompatibility JavaVersion.VERSION_1_8//引用的java版本
    }
    kotlinOptions {
        jvmTarget = '1.8'//kotlinOptions版本
    }
}

dependencies {//依赖闭包

    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0' //远程依赖库,androidx.appcompat域名,用于和其他公司区分；appcompat工程名,1.2.0版本号
    implementation 'com.google.android.material:material:1.3.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    testImplementation 'junit:junit:4.+' ///测试依赖
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}